#!/bin/bash
# (Copyright) [2017 - 2017] Confluent, Inc.

# Use shellcheck to lint this file

base_dir=$( cd -P "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )

# calling env var and its overridden file
env=${MAPR_HOME:-/opt/mapr}/conf/env.sh
[ -f $env ] && . $env

# Log directory to use
if [ "x$LOG_DIR" = "x" ]; then
  LOG_DIR="$base_dir/logs"
fi

# create logs directory
if [ ! -d "$LOG_DIR" ]; then
  mkdir -p "$LOG_DIR"
fi

: "${KSQL_CLASSPATH:=""}"
: "${KSQL_LOG4J_OPTS:=""}"
: "${KSQL_JMX_OPTS:=""}"
: "${KSQL_OPTS:=""}"
: "${KSQL_HEAP_OPTS:=""}"
: "${KSQL_JVM_PERFORMANCE_OPTS:=""}"
: "${JMX_PORT:=""}"
: "${JAVA_HOME:=""}"

# Development jars. `mvn package` should collect all the required dependency jars here
for project in ksqldb-engine ksqldb-examples ksqldb-rest-app ksqldb-cli ksqldb-functional-tests; do
    for dir in "$base_dir/$project/target/$project"-*-development; do
      KSQL_DIR="$dir/share/java/$project"
      if [ -d "$KSQL_DIR" ]; then
        KSQL_CLASSPATH="$KSQL_CLASSPATH:$KSQL_DIR/*"
      fi
    done
done

# Production jars - each one is prepended so they will appear in reverse order.  KSQL jars take precedence over other stuff passed in via CLASSPATH env var
for library in "confluent-common" "confluent-telemetry" "ksqldb-examples" "rest-utils" "ksqldb-engine" "ksqldb-rest-app" "ksqldb-cli" "ksqldb-functional-tests" "ksqldb" "monitoring-interceptors" "confluent-security/ksql"; do
  DIR="$base_dir/share/java/$library"
  if [ -d "$DIR" ]; then
    KSQL_CLASSPATH="$DIR/*:$KSQL_CLASSPATH"
  fi
done

# logj4 settings
if [ -z "$KSQL_LOG4J_OPTS" ]; then
  # Test for files from dev -> packages so this will work as expected in dev if you have packages
  # installed
  if [ -e "$base_dir/config/log4j.properties" ]; then # Dev environment
    KSQL_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/config/log4j.properties"
  elif [ -e "$base_dir/etc/ksql/log4j.properties" ]; then # Simple zip file layout
    KSQL_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/etc/ksql/log4j.properties"
  elif [ -e "/etc/ksqldb/log4j.properties" ]; then # Normal install layout
    KSQL_LOG4J_OPTS="-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
  fi
fi

 KSQL_LOG4J_OPTS="-Dksql.log.dir=$LOG_DIR ${KSQL_LOG4J_OPTS}"

# main class should be assigned before jmx options
MAIN="$1"
shift

# JMX settings
isSecure="false"
if [ -f "${MAPR_HOME:-/opt/mapr}/conf/mapr-clusters.conf" ]; then
  isSecure=$(head -1 ${MAPR_HOME:-/opt/mapr}/conf/mapr-clusters.conf | grep -o 'secure=\w*' | cut -d= -f2)
fi

MAPR_JMX_PORT=${MAPR_JMX_KSQL_PORT:-3415}

JMX_JAR=$(echo ${MAPR_HOME:-/opt/mapr}/lib/jmxagent*)

if [ -z "$MAPR_JMXLOCALBINDING" ]; then
  MAPR_JMXLOCALBINDING="false"
fi

if [ -z "$MAPR_JMXAUTH" ]; then
  MAPR_JMXAUTH="false"
fi

if [ -z "$MAPR_JMXSSL" ]; then
  MAPR_JMXSSL="false"
fi

if [ -z "$MAPR_AUTH_LOGIN_CONFIG_FILE" ]; then
  MAPR_AUTH_LOGIN_CONFIG_FILE="${MAPR_HOME:-/opt/mapr}/conf/mapr.login.conf"
fi

if [ -z "$MAPR_LOGIN_CONFIG" ]; then
  MAPR_LOGIN_CONFIG="JMX_AGENT_LOGIN"
fi

if [ -z "$MAPR_JMXDISABLE" ] && [ -z "$MAPR_JMXLOCALHOST" ] && [ -z "$MAPR_JMXREMOTEHOST" ]; then
  echo "No MapR JMX options given - defaulting to local binding"
fi

if [[ ( -z "$MAPR_JMXDISABLE" || "$MAPR_JMXDISABLE" = 'false' ) && ( $MAIN == *"KsqlServerMain" ) && \
      ( -z "$MAPR_JMX_KSQL_ENABLE" || "$MAPR_JMX_KSQL_ENABLE" = "true" ) ]]; then
  # default setting for localBinding
  MAPR_JMX_OPTS="-Dcom.sun.management.jmxremote"

  if [ "$MAPR_JMXLOCALHOST" = "true" ] && [ "$MAPR_JMXREMOTEHOST" = "true" ]; then
    echo "WARNING: Both MAPR_JMXLOCALHOST and MAPR_JMXREMOTEHOST options are enabled - defaulting to MAPR_JMXLOCAHOST config"
    MAPR_JMXREMOTEHOST=false
  fi

  if [ "$isSecure" = "true" ] && [ "$MAPR_JMXREMOTEHOST" = "true" ]; then
    if [ -n "$JMX_JAR" ] && [ -f ${JMX_JAR} ]; then
      MAPR_JMX_OPTS="-javaagent:$JMX_JAR \
      -Dmapr.jmx.agent.login.config=$MAPR_LOGIN_CONFIG"
      MAPR_JMXAUTH="true"
    else
      echo "jmxagent jar file missed"
      exit 1
    fi
  fi

  if [ "$MAPR_JMXAUTH" = "true" ]; then
    if [ "$isSecure" = "true" ]; then
      if [ -f "$MAPR_AUTH_LOGIN_CONFIG_FILE" ] && [ -f "${MAPR_HOME:-/opt/mapr}/conf/jmxremote.access" ]; then
        MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.authenticate=true \
        -Djava.security.auth.login.config=$MAPR_AUTH_LOGIN_CONFIG_FILE \
        -Dcom.sun.management.jmxremote.access.file=${MAPR_HOME:-/opt/mapr}/conf/jmxremote.access"
      else
        echo "JMX login config or access file missing - not starting since we are in secure mode"
        exit 1
      fi
    else
      echo "JMX login config or access file missing - not starting since we are in secure mode"
      exit 1
    fi

      if [ "$MAPR_JMXREMOTEHOST" = "false" ]; then
        MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.login.config=$MAPR_LOGIN_CONFIG"
      fi
  else
    MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
  fi

  if [ "$MAPR_JMXLOCALHOST" = "true" ] || [ "$MAPR_JMXREMOTEHOST" = "true" ]; then
    if [ "$MAPR_JMXSSL" = "true" ] && [ "$MAPR_JMXLOCALHOST" = "true" ] ; then
      echo "WARNING: ssl is not supported in localhost. Setting default to false"
      MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.ssl=false"
    else
      MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.ssl=false"
    fi

    if [ "$MAPR_JMXLOCALHOST" = "true" ]; then
      MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Djava.rmi.server.hostname=localhost \
      -Dcom.sun.management.jmxremote.host=localhost \
      -Dcom.sun.management.jmxremote.local.only=true"
    fi

    if [ -z "$MAPR_JMX_PORT" ]; then
      echo "WARNING: No JMX port given for KSQL - disabling TCP base JMX service"
      MAPR_JMX_OPTS=""
    else
      if [ "$MAPR_JMXREMOTEHOST" = "true" ] && [ "$isSecure" = "true" ]; then
        MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dmapr.jmx.agent.port=$MAPR_JMX_PORT"
        echo "Enabling TCP JMX for KSQL on port $MAPR_JMX_PORT"
      else
        MAPR_JMX_OPTS="$MAPR_JMX_OPTS -Dcom.sun.management.jmxremote.port=$MAPR_JMX_PORT"
        if [ "$MAPR_JMXLOCALHOST" = "true" ]; then
          echo "Enabling TCP JMX for KSQL only on localhost port $MAPR_JMX_PORT"
        else
          echo "Enabling TCP JMX for KSQL on port $MAPR_JMX_PORT"
        fi
      fi
    fi
  fi

  if [ "$MAPR_JMXLOCALBINDING" = "true" ] && [ -z "$MAPR_JMX_OPTS" ]; then
    echo "Enabling JMX local binding only"
    MAPR_JMX_OPTS="-Dcom.sun.management.jmxremote"
  fi
else
  if [[ $MAIN != *"KsqlServerMain" ]]; then
    echo "JMX disabled - It is used for only KSQL server (skipped for avro consumer and producer)."
  else
    echo "JMX disabled by user request"
  fi
  MAPR_JMX_OPTS=""
fi

KSQL_JMX_OPTS=$MAPR_JMX_OPTS

# Generic jvm settings you want to add
if [ -z "$KSQL_OPTS" ]; then
  KSQL_OPTS=""
fi

# Which java to use
if [ -z "$JAVA_HOME" ]; then
  JAVA="java"
else
  JAVA="$JAVA_HOME/bin/java"
fi

# Memory options
if [ -z "$KSQL_HEAP_OPTS" ]; then
  KSQL_HEAP_OPTS="-Xmx3g"
fi

# JVM performance options
if [ -z "$KSQL_JVM_PERFORMANCE_OPTS" ]; then
  KSQL_JVM_PERFORMANCE_OPTS="-server -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+ExplicitGCInvokesConcurrent -XX:NewRatio=1 -Djava.awt.headless=true"
fi

if [ $# -lt 1 ];
then
  echo "USAGE: $0 [-daemon] [opts] [-help]"
    exit 1
fi

DAEMON_NAME=""
GC_LOG_ENABLED=""
DAEMON_MODE=""
HELP=""
if [ "$1" = "help" ]; then
  HELP="true"
fi
while [ $# -gt 0 ]; do
  COMMAND="$1"
  case "$COMMAND" in
    -name)
      DAEMON_NAME=$2
      shift 2
      ;;
    -loggc)
      GC_LOG_ENABLED="true"
      shift
      ;;
    -daemon)
      DAEMON_MODE="true"
      shift
      ;;
    -help)
      HELP="true"
      shift
      ;;
   *)
      break
      ;;
  esac
done


# GC options
GC_FILE_SUFFIX='-gc.log'
GC_LOG_FILE_NAME=''
KSQL_GC_LOG_OPTS=""
if [ "x$GC_LOG_ENABLED" = "xtrue" ]; then
  GC_LOG_FILE_NAME=$DAEMON_NAME$GC_FILE_SUFFIX
  # The first segment of the version number, which is '1' for releases before Java 9
  # it then becomes '9', '10', ...
  # Some examples of the first line of `java --version`:
  # 8 -> java version "1.8.0_152"
  # 9.0.4 -> java version "9.0.4"
  # 10 -> java version "10" 2018-03-20
  # 10.0.1 -> java version "10.0.1" 2018-04-17
  # We need to match to the end of the line to prevent sed from printing the characters that do not match
  JAVA_MAJOR_VERSION=$($JAVA -version 2>&1 | sed -E -n 's/.* version "([0-9]*).*$/\1/p')
  if [[ "$JAVA_MAJOR_VERSION" -ge "9" ]] ; then
    KSQL_GC_LOG_OPTS="-Xlog:gc*:file=$LOG_DIR/$GC_LOG_FILE_NAME:time,tags:filecount=10,filesize=102400"
  else
    KSQL_GC_LOG_OPTS="-Xloggc:$LOG_DIR/$GC_LOG_FILE_NAME -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
  fi
fi


if [ "x$HELP" = "xtrue" ]; then
  exec "$JAVA" -cp "$KSQL_CLASSPATH" "$MAIN" --help
  exit 1
fi

OPTIONS=($KSQL_HEAP_OPTS)
OPTIONS+=($KSQL_JVM_PERFORMANCE_OPTS)
OPTIONS+=($KSQL_JMX_OPTS)
OPTIONS+=($KSQL_LOG4J_OPTS)
OPTIONS+=($KSQL_OPTS)
OPTIONS+=($KSQL_GC_LOG_OPTS)


MAPR_CLIENT_CLASSPATH=$(mapr clientclasspath)
MAPR_CLIENT_CLASSPATH=$MAPR_CLIENT_CLASSPATH:${find ${BASEMAPR:-/opt/mapr}/kafka -name "kafka-eventstreams-*.jar"}
KSQL_CLASSPATH=$KSQL_CLASSPATH:$MAPR_CLIENT_CLASSPATH
KAFKA_VERSION=$(cat "/opt/mapr/kafka/kafkaversion")
KSQL_CLASSPATH=$KSQL_CLASSPATH:/opt/mapr/kafka/kafka-$KAFKA_VERSION/libs/*
if [ -d "/opt/mapr/schema-registry" ]; then
   SR_VERSION=$(cat "/opt/mapr/schema-registry/schema-registryversion")
   KSQL_CLASSPATH=$KSQL_CLASSPATH:/opt/mapr/schema-registry/schema-registry-$SR_VERSION/share/java/schema-registry/*
fi

# To enable PAM:
JAVA_LIB_PATH="-Djava.library.path=${BASEMAPR:-/opt/mapr}/lib/"
KSQL_CLASSPATH=$KSQL_CLASSPATH:${BASEMAPR:-/opt/mapr}/lib/JPam-1.1.jar


if [ -f ${JMX_JAR} ]; then
  KSQL_CLASSPATH=$KSQL_CLASSPATH:$JMX_JAR
fi

PID="/dev/null"
if [[ $MAIN == *"KsqlServerMain" ]]; then
    PID="${BASEMAPR:-/opt/mapr}/pid/ksql.pid"
fi

echo $$ > $PID

# Launch mode
if [ "x$DAEMON_MODE" = "xtrue" ]; then
  DAEMON_STDOUT_FILE="$LOG_DIR/ksql.out"
  echo "Writing console output to $DAEMON_STDOUT_FILE"
  nohup "$JAVA" $JAVA_LIB_PATH -cp "$KSQL_CLASSPATH" "${OPTIONS[@]}" "$MAIN" "$@" 2>&1 < /dev/null > "$DAEMON_STDOUT_FILE" &
else
  exec "$JAVA" $JAVA_LIB_PATH -cp "$KSQL_CLASSPATH" "${OPTIONS[@]}" "$MAIN" "$@"
fi
